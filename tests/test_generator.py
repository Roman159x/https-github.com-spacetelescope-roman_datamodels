import filecmp
from pathlib import Path

import pytest

from roman_datamodels.datamodels import _generated
from roman_datamodels.generator import setup_files


@pytest.fixture(scope="module")
def generated_code(tmp_path_factory):
    """Run the code generator"""
    path = tmp_path_factory.mktemp("data")
    setup_files(path)

    return path


# Ignore the deprecation warnings issued when running datamodel-code-generator
#    These will be resolved when datamodel-code-generator drops pydantic v1 support
@pytest.mark.parametrize("generated_file", Path(_generated.__file__).parent.glob("**/*.py"))
@pytest.mark.filterwarnings(
    "ignore:The `parse_obj` method is deprecated.*",
    "ignore:The `__fields_set__` attribute is deprecated.*",
    "ignore:The `dict` method is deprecated.*",
)
def test_generated_code(generated_code, generated_file):
    """
    Test that the generated code matches the code installed with the package

    Note this test will not catch if the generator creates new files.
    """
    file_path = generated_code / generated_file.relative_to(Path(_generated.__file__).parent)

    # Sanity check that the file exists
    assert file_path.exists()

    # Compare the generated file to the file installed with the package
    filecmp.cmp(generated_file, file_path)


@pytest.mark.filterwarnings(
    "ignore:The `parse_obj` method is deprecated.*",
    "ignore:The `__fields_set__` attribute is deprecated.*",
    "ignore:The `dict` method is deprecated.*",
)
def test_all_files_exist(generated_code):
    """
    Test that all the files generated by the code generator have a matching file in the installed package
    """
    generated_path = Path(_generated.__file__).parent

    files = [file.relative_to(generated_path) for file in generated_path.glob("**/*.py")]
    new_files = [file.relative_to(generated_code) for file in generated_code.glob("**/*.py")]

    # Check that all the newly generated files have a file in the installed package
    assert set(files) == set(new_files)
