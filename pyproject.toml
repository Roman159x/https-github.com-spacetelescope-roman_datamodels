[project]
name = 'roman_datamodels'
description = 'data models supporting calibration of the Nancy Grace Roman Space Telescope'
readme = 'README.md'
requires-python = '>=3.9'
license = { file = 'LICENSE' }
authors = [{ name = 'STScI', email = 'help@stsci.edu' }]
classifiers = [
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Astronomy',
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python :: 3',
]
dependencies = [
    'asdf >=2.15.0',
    'asdf-astropy >=0.4.0',
    'gwcs >=0.18.1',
    'psutil >=5.7.2',
    'numpy >=1.22',
    'astropy >=5.3.0',
    'rad >=0.17.1',
    #'rad @ git+https://github.com/spacetelescope/rad.git@main',
    'asdf-standard >=1.0.3',
]
dynamic = ['version']

[project.optional-dependencies]
test = [
    'pytest >=6.0.0',
    'pytest-doctestplus',
    'pytest-doctestplus >=0.10.0',
    'pytest-env >= 0.8'
]
aws = [
    'stsci-aws-utils >= 0.1.2',
]
docs = [
    'sphinx',
    'sphinx-automodapi',
    'sphinx-rtd-theme',
    'stsci-rtd-theme',
    'sphinx-astropy',
    'sphinx-asdf',
    'tomli; python_version <"3.11"',
]

[project.urls]
'issues' = 'https://github.com/spacetelescope/roman_datamodels/issues'
'repository' = 'https://github.com/spacetelescope/roman_datamodels'

[project.entry-points]
'asdf.extensions' = { roman_datamodels = 'roman_datamodels.stnode._integration:get_extensions' }

[build-system]
requires = ["setuptools >=61", "setuptools_scm[toml] >=3.4", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/roman_datamodels/_version.py"

[tool.setuptools.packages.find]
where = ['src']

[tool.pytest.ini_options]
minversion = 4.6
doctest_plus = true
doctest_rst = true
text_file_format = 'rst'
addopts = '--color=yes --doctest-rst'
testpaths = ['tests']
filterwarnings = [
    "error",
    "ignore:numpy.ndarray size changed:RuntimeWarning",
]
env = [
    "ROMAN_VALIDATE=true",
    "ROMAN_STRICT_VALIDATION=true",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about packages we have installed
    'except ImportError',
    # Don't complain if tests don't hit assertions
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain about script hooks
    'def main\(.*\):',
    'if __name__ == \(.*\):',
    # Don't complain if non-runnable code isn't run
    'pass\n',
]

[tool.isort]
profile = "black"
filter_files = true
line_length = 88

[tool.black]
line-length = 88
force-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.pytest_cache
    | \.tox
  )/
)
'''

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    'F',       # Pyflakes (part of flake8 defaults)
    'W', 'E',  # pycodestyle (part of flake8 defaults)
    'I',       # isort (sort imports)
    # # 'N',       # pep8-naming (follow PEP8 naming conventions)
    'UP',      # pyupgrade (upgrade syntax)
    'S',       # flake8-bandit (security)
    'BLE',     # flake8-blind-except (prevent blind except statements)
    'B',       # flake8-bugbear (best practices)
    'A',       # flake8-builtins (prevent shadowing of builtins)
    'C4',      # flake8-comprehensions (best practices for comprehensions)
    'T10',     # flake8-debugger (prevent debugger statements in code)
    'ISC',     # flake8-implicit-str-concat (prevent implicit string concat)
    'ICN',     # flake8-import-conventions (enforce import conventions)
    'INP',     # flake8-no-pep420 (prevent use of PEP420, i.e. implicit name spaces)
    'G',       # flake8-logging-format (best practices for logging)
    'PIE',     # flake8-pie (misc suggested improvement linting)
    'T20',     # flake8-print (prevent print statements in code)
    'PT',      # flake8-pytest-style (best practices for pytest)
    'Q',       # flake8-quotes (best practices for quotes)
    'RSE',     # flake8-raise (best practices for raising exceptions)
    'RET',     # flake8-return (best practices for return statements)
    # 'SLF',     # flake8-self (prevent private member access)
    # 'TID',     # flake8-tidy-imports (prevent banned api and best import practices)
    # 'INT',     # flake8-gettext (when to use printf style strings)
    # # 'ARG',     # flake8-unused-arguments (prevent unused arguments)
    # 'PTH',     # flake8-use-pathlib (prefer pathlib over os.path)
    # # 'ERA',     # eradicate (remove commented out code)
    # 'PGH',     # pygrep (simple grep checks)
    # # 'PL',      # pylint (general linting, flake8 alternative)
    # 'FLY',     # flynt (f-string conversion where possible)
    # 'NPY',     # NumPy-specific checks (recommendations from NumPy)
    # 'PERF',    # Perflint (performance linting)
    'RUF',     # ruff specific checks
]

[tool.ruff.extend-per-file-ignores]
"tests/*.py" = ["S101"]  # Turn off assert error for test file
"src/roman_datamodels/testing.py" = ["S101"]  # Turn off assert error for general test helpers
"docs/*.py" = ["INP001"]  # Turn off implicit namespace error for sphinx conf

[tool.codespell]
skip="*.pdf,*.fits,*.asdf,.tox,build,./tags,.git,docs/_build"
# ignore-words-list="""
# """
